generator client {
  provider = "prisma-client"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://developer:Safe1!@localhost:5432/approvio?schema=public"
}

model Databasechangelog {
  id            String   @db.VarChar(255)
  author        String   @db.VarChar(255)
  filename      String   @db.VarChar(255)
  dateexecuted  DateTime @db.Timestamp(6)
  orderexecuted Int
  exectype      String   @db.VarChar(10)
  md5sum        String?  @db.VarChar(35)
  description   String?  @db.VarChar(255)
  comments      String?  @db.VarChar(255)
  tag           String?  @db.VarChar(255)
  liquibase     String?  @db.VarChar(20)
  contexts      String?  @db.VarChar(255)
  labels        String?  @db.VarChar(255)
  deploymentId  String?  @map("deployment_id") @db.VarChar(10)

  @@map("databasechangelog")
  @@ignore
}

model Databasechangeloglock {
  id          Int       @id
  locked      Boolean
  lockgranted DateTime? @db.Timestamp(6)
  lockedby    String?   @db.VarChar(255)

  @@map("databasechangeloglock")
  @@ignore
}

model Group {
  id                    String                 @id @db.Uuid
  name                  String                 @unique(map: "groups_name_unique") @db.VarChar
  description           String?                @db.VarChar
  createdAt             DateTime               @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime               @map("updated_at") @db.Timestamp(6)
  occ                   BigInt
  agentGroupMemberships AgentGroupMembership[]
  groupMemberships      GroupMembership[]

  @@map("groups")
}

model GroupMembership {
  groupId   String   @map("group_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  createdAt DateTime @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @map("updated_at") @db.Timestamp(6)
  groups    Group    @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_group_memberships_group")
  users     User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_group_memberships_user")

  @@id([groupId, userId], map: "pk_group_memberships")
  @@index([groupId], map: "idx_group_memberships_group_id")
  @@index([userId], map: "idx_group_memberships_user_id")
  @@map("group_memberships")
}

model User {
  id                 String             @id @db.Uuid
  displayName        String             @map("display_name") @db.VarChar
  email              String             @unique(map: "users_email_unique") @db.VarChar
  createdAt          DateTime           @map("created_at") @db.Timestamp(6)
  roles              Json?              @db.Json
  occ                BigInt
  groupMemberships   GroupMembership[]
  organizationAdmins OrganizationAdmin?
  votes              Vote[]

  @@map("users")
}

model Workflow {
  id                        String                     @id @db.Uuid
  name                      String                     @unique(map: "workflows_name_unique") @db.VarChar
  description               String?                    @db.VarChar
  createdAt                 DateTime                   @map("created_at") @db.Timestamp(6)
  updatedAt                 DateTime                   @map("updated_at") @db.Timestamp(6)
  status                    String                     @db.VarChar
  occ                       BigInt
  recalculationRequired     Boolean                    @map("recalculation_required")
  workflowTemplateId        String                     @map("workflow_template_id") @db.Uuid
  expiresAt                 DateTime                   @map("expires_at") @db.Timestamp(6)
  votes                     Vote[]
  workflowActionsEmailTasks WorkflowActionsEmailTask[]
  workflowTemplates         WorkflowTemplate           @relation(fields: [workflowTemplateId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_workflows_workflow_template")

  @@map("workflows")
}

model WorkflowTemplate {
  id                              String     @id @db.Uuid
  name                            String     @db.VarChar
  description                     String?    @db.VarChar
  approvalRule                    Json       @map("approval_rule")
  actions                         Json?
  defaultExpiresInHours           Int?       @map("default_expires_in_hours")
  createdAt                       DateTime   @map("created_at") @db.Timestamp(6)
  updatedAt                       DateTime   @map("updated_at") @db.Timestamp(6)
  status                          String     @db.VarChar(50)
  version                         String     @db.VarChar(50)
  allowVotingOnDeprecatedTemplate Boolean    @map("allow_voting_on_deprecated_template")
  occ                             BigInt
  workflows                       Workflow[]

  @@unique([name, version], map: "workflow_templates_name_version_unique")
  @@map("workflow_templates")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Vote {
  id             String   @id @db.Uuid
  workflowId     String   @map("workflow_id") @db.Uuid
  userId         String   @map("user_id") @db.Uuid
  voteType       String   @map("vote_type") @db.VarChar(255)
  reason         String?
  votedForGroups String[] @map("voted_for_groups") @db.VarChar
  createdAt      DateTime @map("created_at") @db.Timestamp(6)
  users          User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_votes_user")
  workflows      Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_votes_workflow")

  @@index([workflowId, userId, createdAt(sort: Desc)], map: "idx_votes_workflow_user_created")
  @@map("votes")
}

model WorkflowActionsEmailTask {
  id            String    @id @db.Uuid
  workflowId    String    @map("workflow_id") @db.Uuid
  status        String    @db.VarChar(255)
  configuration Json
  retryCount    Int       @default(0) @map("retry_count")
  createdAt     DateTime  @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime  @map("updated_at") @db.Timestamptz(6)
  errorReason   String?   @map("error_reason") @db.VarChar(16384)
  lockedBy      String?   @map("locked_by") @db.VarChar(512)
  lockedAt      DateTime? @map("locked_at") @db.Timestamptz(6)
  occ           BigInt
  workflows     Workflow  @relation(fields: [workflowId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_workflow_actions_email_workflow_id")

  @@map("workflow_actions_email_task")
}

model PkceSession {
  state        String    @id @db.VarChar(255)
  codeVerifier String    @map("code_verifier") @db.VarChar(255)
  redirectUri  String    @map("redirect_uri") @db.VarChar(500)
  oidcState    String    @map("oidc_state") @db.VarChar(255)
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamp(6)
  expiresAt    DateTime  @map("expires_at") @db.Timestamp(6)
  usedAt       DateTime? @map("used_at") @db.Timestamp(6)
  occ          BigInt

  @@map("pkce_sessions")
}

model OrganizationAdmin {
  id        String   @id @db.Uuid
  email     String   @unique(map: "organization_admins_email_unique") @db.VarChar(512)
  createdAt DateTime @map("created_at") @db.Timestamp(6)
  users     User     @relation(fields: [email], references: [email], onDelete: Cascade, onUpdate: NoAction, map: "fk_organization_admins_user")

  @@map("organization_admins")
}

model Space {
  id          String   @id @db.Uuid
  name        String   @unique(map: "spaces_name_unique") @db.VarChar(255)
  description String?  @db.VarChar(2048)
  createdAt   DateTime @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime @map("updated_at") @db.Timestamp(6)
  occ         BigInt

  @@map("spaces")
}

model Agent {
  id                    String                 @id @db.Uuid
  agentName             String                 @unique(map: "agents_agent_name_unique") @map("agent_name")
  base64PublicKey       String                 @map("base64_public_key")
  createdAt             DateTime               @map("created_at") @db.Timestamp(6)
  occ                   BigInt
  agentChallenges       AgentChallenge[]
  agentGroupMemberships AgentGroupMembership[]

  @@map("agents")
}

model AgentChallenge {
  id        String    @id @db.Uuid
  agentId   String    @map("agent_id") @db.Uuid
  nonce     String    @unique(map: "agent_challenges_nonce_unique")
  expiresAt DateTime  @map("expires_at") @db.Timestamp(6)
  usedAt    DateTime? @map("used_at") @db.Timestamp(6)
  createdAt DateTime  @map("created_at") @db.Timestamp(6)
  occ       BigInt
  agents    Agent     @relation(fields: [agentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_agent_challenges_agent")

  @@map("agent_challenges")
}

model AgentGroupMembership {
  groupId   String   @map("group_id") @db.Uuid
  agentId   String   @map("agent_id") @db.Uuid
  createdAt DateTime @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @map("updated_at") @db.Timestamp(6)
  agents    Agent    @relation(fields: [agentId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_agent_group_memberships_agent")
  groups    Group    @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_agent_group_memberships_group")

  @@id([groupId, agentId], map: "pk_agent_group_memberships")
  @@index([agentId], map: "idx_agent_group_memberships_agent_id")
  @@index([groupId], map: "idx_agent_group_memberships_group_id")
  @@map("agent_group_memberships")
}
