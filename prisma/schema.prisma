generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://developer:Safe1!@localhost:5432/approvio?schema=public"
}

model Databasechangelog {
  id            String   @db.VarChar(255)
  author        String   @db.VarChar(255)
  filename      String   @db.VarChar(255)
  dateexecuted  DateTime @db.Timestamp(6)
  orderexecuted Int
  exectype      String   @db.VarChar(10)
  md5sum        String?  @db.VarChar(35)
  description   String?  @db.VarChar(255)
  comments      String?  @db.VarChar(255)
  tag           String?  @db.VarChar(255)
  liquibase     String?  @db.VarChar(20)
  contexts      String?  @db.VarChar(255)
  labels        String?  @db.VarChar(255)
  deploymentId  String?  @map("deployment_id") @db.VarChar(10)

  @@map("databasechangelog")
  @@ignore
}

model Databasechangeloglock {
  id          Int       @id
  locked      Boolean
  lockgranted DateTime? @db.Timestamp(6)
  lockedby    String?   @db.VarChar(255)

  @@map("databasechangeloglock")
  @@ignore
}

model Group {
  id               String            @id @db.Uuid
  name             String            @unique(map: "groups_name_unique") @db.VarChar
  description      String?           @db.VarChar
  createdAt        DateTime          @map("created_at") @db.Timestamp(6)
  updatedAt        DateTime          @map("updated_at") @db.Timestamp(6)
  occ              BigInt
  groupMemberships GroupMembership[]

  @@map("groups")
}

model GroupMembership {
  groupId   String   @map("group_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  role      String   @db.VarChar
  createdAt DateTime @map("created_at") @db.Timestamp(6)
  updatedAt DateTime @map("updated_at") @db.Timestamp(6)
  groups    Group    @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_group_memberships_group")
  users     User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_group_memberships_user")

  @@id([groupId, userId], map: "pk_group_memberships")
  @@index([groupId], map: "idx_group_memberships_group_id")
  @@index([userId], map: "idx_group_memberships_user_id")
  @@map("group_memberships")
}

model User {
  id               String            @id @db.Uuid
  displayName      String            @map("display_name") @db.VarChar
  email            String            @unique(map: "users_email_unique") @db.VarChar
  createdAt        DateTime          @map("created_at") @db.Timestamp(6)
  orgRole          String            @map("org_role") @db.VarChar
  occ              BigInt
  groupMemberships GroupMembership[]
  votes            Vote[]

  @@map("users")
}

model Workflow {
  id                    String           @id @db.Uuid
  name                  String           @unique(map: "workflows_name_unique") @db.VarChar
  description           String?          @db.VarChar
  createdAt             DateTime         @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime         @map("updated_at") @db.Timestamp(6)
  status                String           @db.VarChar
  occ                   BigInt
  recalculationRequired Boolean          @map("recalculation_required")
  workflowTemplateId    String           @map("workflow_template_id") @db.Uuid
  expiresAt             DateTime         @map("expires_at") @db.Timestamp(6)
  votes                 Vote[]
  workflowTemplates     WorkflowTemplate @relation(fields: [workflowTemplateId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_workflows_workflow_template")

  @@map("workflows")
}

model WorkflowTemplate {
  id                    String     @id @db.Uuid
  name                  String     @unique(map: "workflow_templates_name_unique") @db.VarChar
  description           String?    @db.VarChar
  approvalRule          Json       @map("approval_rule")
  actions               Json?
  defaultExpiresInHours Int?       @map("default_expires_in_hours")
  createdAt             DateTime   @map("created_at") @db.Timestamp(6)
  updatedAt             DateTime   @map("updated_at") @db.Timestamp(6)
  occ                   BigInt
  workflows             Workflow[]

  @@map("workflow_templates")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Vote {
  id             String   @id @db.Uuid
  workflowId     String   @map("workflow_id") @db.Uuid
  userId         String   @map("user_id") @db.Uuid
  voteType       String   @map("vote_type") @db.VarChar(255)
  reason         String?
  votedForGroups String[] @map("voted_for_groups") @db.VarChar
  createdAt      DateTime @map("created_at") @db.Timestamp(6)
  users          User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_votes_user")
  workflows      Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_votes_workflow")

  @@index([workflowId, userId, createdAt(sort: Desc)], map: "idx_votes_workflow_user_created")
  @@map("votes")
}
