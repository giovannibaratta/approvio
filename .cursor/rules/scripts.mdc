---
description: 
globs: 
alwaysApply: true
---
## Description

This rule describes the available scripts in `package.json` for the `approvio` project. It details their usage, expected output, and how to trigger them using `yarn`.

## Scripts Overview

| Script Name             | How to Trigger                 | Description                                                                                                                                                | Expected Output / Behavior                                                                                               | Blocking?  |
| ----------------------- | ------------------------------ | ---------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------ | ---------- |
| `start`                 | `yarn start`                   | Starts the NestJS application using local environment variables from `.env.local`.                                                                         | Application logs. Runs in the foreground, blocks the terminal.                                                           | Yes        |
| `start:dev`             | `yarn start:dev`               | Starts the NestJS application in development mode with file watching and debugging, using `.env.local`.                                                    | Application logs. Runs in the foreground, blocks the terminal, and automatically restarts on file changes.               | Yes        |
| `deps:start`            | `yarn deps:start`              | Starts project dependencies (e.g., Docker containers for database, etc.) using the `./scripts/dependencies.sh start` command.                              | Logs from the `dependencies.sh` script and any started services. Behavior (foreground/background) depends on the script. | Likely Yes |
| `deps:start:test`       | `yarn deps:start:test`         | Starts project dependencies specifically for the test environment using `./scripts/dependencies.sh start test`.                                            | Logs from `dependencies.sh` and test dependency services.                                                                | Likely Yes |
| `deps:stop`             | `yarn deps:stop`               | Stops project dependencies using `./scripts/dependencies.sh stop`.                                                                                         | Logs from `dependencies.sh` indicating services are stopped.                                                             | No         |
| `deps:down`             | `yarn deps:down`               | Stops and removes project dependencies (e.g., Docker containers and their volumes) using `./scripts/dependencies.sh down`.                                 | Logs from `dependencies.sh`.                                                                                             | No         |
| `deps:rebuild`          | `yarn deps:rebuild`            | Rebuilds project dependencies (e.g., Docker images) using `./scripts/dependencies.sh rebuild`.                                                             | Logs from `dependencies.sh` detailing the rebuild process.                                                               | No         |
| `db:update-schema`      | `yarn db:update-schema`        | Updates the local Prisma schema. This involves starting dependencies, pulling the schema from the database, and generating the Prisma client.              | Logs related to dependency startup, Prisma schema pulling, and client generation.                                        | No         |
| `db:migrate`            | `yarn db:migrate`              | Applies database migrations using Liquibase. This script first ensures dependencies are running.                                                           | Logs from Liquibase showing the status of database migrations.                                                           | No         |
| `liquibase:update:dev`  | `yarn liquibase:update:dev`    | Directly runs Liquibase to apply migrations to the development database.                                                                                   | Liquibase logs detailing migration execution.                                                                            | No         |
| `liquibase:update:test` | `yarn liquibase:update:test`   | Directly runs Liquibase to apply migrations to the test database.                                                                                          | Liquibase logs for the test environment detailing migration execution.                                                   | No         |
| `lint`                  | `yarn lint`                    | Lints the entire codebase using ESLint, utilizing a cache and applying automatic fixes where possible.                                                     | ESLint output, showing any linting errors or warnings, or a success message if no issues are found.                      | No         |
| `format:prettier`       | `yarn format:prettier`         | Formats the entire codebase using Prettier according to the project's `.prettierrc` configuration.                                                         | Prettier output, indicating which files (if any) were reformatted.                                                       | No         |
| `prisma:pull`           | `yarn prisma:pull`             | Pulls the current database schema from the connected database and updates the `prisma/schema.prisma` file. It also reformats the schema file.              | Prisma CLI output regarding the schema pull and formatting.                                                              | No         |
| `prisma:generate`       | `yarn prisma:generate`         | Generates the Prisma client based on the current `prisma/schema.prisma` file.                                                                              | Prisma CLI output indicating the status of client generation.                                                            | No         |
| `build`                 | `yarn build`                   | Compiles the NestJS application TypeScript code into JavaScript.                                                                                           | Build process logs. Output artifacts are typically placed in a `dist` directory.                                         | No         |
| `generate-api`          | `yarn generate-api`            | Generates API client code (models, services) from the `openapi.yaml` specification using `openapi-generator-cli`.                                          | OpenAPI generator CLI logs and generated files in the `generated/openapi/` directory.                                    | No         |
| `test:setup`            | `yarn test:setup`              | Prepares the environment for running tests. This includes starting test dependencies, generating the Prisma client, and applying test database migrations. | Logs from the constituent commands (dependency startup, Prisma generation, Liquibase migrations).                        | No         |
| `test`                  | `yarn test`                    | Runs all unit and integration tests (files matching `app/**/*.test.ts`) after performing `test:setup`. Uses environment variables from `.env.test`.        | Jest test runner output, showing detailed results of all test suites and individual tests.                               | No         |
| `test:single`           | `yarn test:single <file_path>` | Runs a specific test file or pattern after performing `test:setup`. Uses `.env.test`. The path to the test file/pattern must be appended to the command.   | Jest test runner output for the specified test(s).                                                                       | No         |

## Usage Notes

- Scripts like `start` and `start:dev` are long-running processes that will occupy the terminal session. They are intended for active development and application serving.
- The `deps:*` scripts are used to manage external services required by the application, likely orchestrated with Docker via the `. They are non-blocking.
- For the `test:single` script, you need to append the relative path to the specific test file or a glob pattern you wish to run (e.g., `yarn test:single app/services/src/user/user.service.test.ts`).
- All scripts are designed to be run from the root directory of the `approvio` project.
