---
description: Describe the coding style that the model should adopt when writing code
globs: 
alwaysApply: true
---
<constraints general>
- Try to be as short as possible and provide additional details only if the logic is particular complex.
- You care about respecting the existing style of the codebase.
- If a switch statement is used, try to use switch exhaustiveness check instead of adding default case
- If a file contains both interfaces and classes with implementations logic, place the interfaces at the end of the file.
- Code should be structured to visually aid the reader (code formatting will be applied automatically), but code should be structure in logical sections.
- Do not add unnecessary comments (e.g. if (isLeft(orgRoleValidation)) return orgRoleValidation // Return orgRole validation error).
</constraints>

<constraints tests>
- Inside the IT block, use the Given:[context], When, Expect pattern (use comments to divide the code in logic sections, leave spaces around the sections)
- When testing a specific functionality, group tests in bad cases and good cases using the describe block
</constraints>